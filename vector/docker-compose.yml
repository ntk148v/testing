version: "3.8"

x-custom:
  etcd_initial_cluster_token: &etcd_initial_cluster_token "--initial-cluster-token=etcd-cluster"
  etcd_common_settings: &etcd_common_settings
    image: "${ETCD_REGISTRY:-quay.io}/${ETCD_NAMESPACE:-coreos}/etcd:${ETCD_VERSION:-v3.5.10}"
    entrypoint: /usr/local/bin/etcd
  greptimedb_image: &greptimedb_image "${GREPTIMEDB_REGISTRY:-docker.io}/${GREPTIMEDB_NAMESPACE:-greptime}/greptimedb:${GREPTIMEDB_VERSION:-latest}"

services:
  # The Vector service. It collects logs and sends them to clickhouse.
  vector:
    image: timberio/vector:0.49.0-debian
    container_name: vector
    restart: unless-stopped
    volumes:
      # Mount the local vector.yaml config file into the container.
      - ./vector.yaml:/etc/vector/vector.yaml
      # Mount the host's /var/log directory for log collection.
      # Be sure to adjust the path if your logs are elsewhere.
      - /var/log:/var/log:ro
    ports:
      # Expose Vector's API for metrics and health checks.
      - "8686:8686"
    depends_on:
      - clickhouse
      - victorialogs
      - greptime_flownode0
    # Pass environment variables to the Vector container.
    environment:
      - HOSTNAME=${HOSTNAME}
      - VECTOR_LOG=debug

  # The clickhouse service. It receives and stores the logs.
  clickhouse:
    image: clickhouse/clickhouse-server:latest
    container_name: clickhouse
    restart: unless-stopped
    ports:
      # ClickHouse native client port (used by Vector)
      - "9000:9000"
      # ClickHouse HTTP port (for external queries, not used by Vector in this config)
      - "8123:8123"
    volumes:
      # Persist the data and logs for ClickHouse
      - clickhouse-data:/var/lib/clickhouse
      - clickhouse-logs:/var/log/clickhouse-server
      - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    environment:
      # Define a user and password for the ClickHouse database.
      # These credentials are used by Vector to connect.
      - CLICKHOUSE_USER=user
      - CLICKHOUSE_PASSWORD=password
      - CLICKHOUSE_DB=logs

  ch-ui:
    image: ghcr.io/caioricciuti/ch-ui:latest
    container_name: ch_ui
    restart: always
    ports:
      - "5521:5521"
    depends_on:
      - clickhouse
    environment:
      # Core ClickHouse Configuration
      VITE_CLICKHOUSE_URL: "http://localhost:8123"
      VITE_CLICKHOUSE_USER: "user"
      VITE_CLICKHOUSE_PASS: "password"
      # Optional: Advanced Features
      VITE_CLICKHOUSE_USE_ADVANCED: "true"
      VITE_CLICKHOUSE_CUSTOM_PATH: ""
      VITE_CLICKHOUSE_REQUEST_TIMEOUT: "30000"
      # Optional: Reverse Proxy Support
      VITE_BASE_PATH: "/"

  # The VictoriaLogs service. It receives and stores the logs.
  victorialogs:
    image: victoriametrics/victoria-logs:v1.29.0
    container_name: victorialogs
    restart: unless-stopped
    volumes:
      # Persist the data outside the container for long-term storage.
      # This prevents log data loss if the container is removed.
      - victoria-logs-data:/victorialogs-data
    ports:
      # Expose the port for log ingestion (TCP, UDP) and the built-in UI.
      - "9428:9428"
      - "8428:8428"
    command:
      # Set the data storage directory.
      - "--storageDataPath=/victorialogs-data"

  etcd0:
    <<: *etcd_common_settings
    container_name: etcd0
    ports:
      - 2379:2379
      - 2380:2380
    command:
      - --name=etcd0
      - --data-dir=/var/lib/etcd
      - --initial-advertise-peer-urls=http://etcd0:2380
      - --listen-peer-urls=http://0.0.0.0:2380
      - --listen-client-urls=http://0.0.0.0:2379
      - --advertise-client-urls=http://etcd0:2379
      - --heartbeat-interval=250
      - --election-timeout=1250
      - --initial-cluster=etcd0=http://etcd0:2380
      - --initial-cluster-state=new
      - *etcd_initial_cluster_token
    volumes:
      - etcd0_data:/var/lib/etcd
    healthcheck:
      test:
        [
          "CMD",
          "etcdctl",
          "--endpoints=http://etcd0:2379",
          "endpoint",
          "health",
        ]
      interval: 5s
      timeout: 3s
      retries: 5

  metasrv:
    image: *greptimedb_image
    container_name: metasrv
    ports:
      - 3002:3002
      - 3000:3000
    command:
      - metasrv
      - start
      - --rpc-bind-addr=0.0.0.0:3002
      - --rpc-server-addr=metasrv:3002
      - --store-addrs=etcd0:2379
      - --http-addr=0.0.0.0:3000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://metasrv:3000/health"]
      interval: 5s
      timeout: 3s
      retries: 5
    depends_on:
      etcd0:
        condition: service_healthy

  greptime_datanode0:
    image: *greptimedb_image
    container_name: greptime_datanode0
    ports:
      - 3001:3001
      - 5000:5000
    command:
      - datanode
      - start
      - --node-id=0
      - --data-home=/greptimedb_data
      - --rpc-bind-addr=0.0.0.0:3001
      - --rpc-server-addr=greptime_datanode0:3001
      - --metasrv-addrs=metasrv:3002
      - --http-addr=0.0.0.0:5000
    volumes:
      - greptime_datanode0_data:/greptimedb_data
    healthcheck:
      test: ["CMD", "curl", "-fv", "http://greptime_datanode0:5000/health"]
      interval: 5s
      timeout: 3s
      retries: 10
    depends_on:
      metasrv:
        condition: service_healthy

  greptime_frontend0:
    image: *greptimedb_image
    container_name: greptime_frontend0
    ports:
      - 4000:4000
      - 4001:4001
      - 4002:4002
      - 4003:4003
    command:
      - frontend
      - start
      - --metasrv-addrs=metasrv:3002
      - --http-addr=0.0.0.0:4000
      - --rpc-bind-addr=0.0.0.0:4001
      - --mysql-addr=0.0.0.0:4002
      - --postgres-addr=0.0.0.0:4003
    healthcheck:
      test: ["CMD", "curl", "-f", "http://greptime_frontend0:4000/health"]
      interval: 5s
      timeout: 3s
      retries: 5
    depends_on:
      greptime_datanode0:
        condition: service_healthy

  greptime_flownode0:
    image: *greptimedb_image
    container_name: greptime_flownode0
    ports:
      - 4004:4004
      - 4005:4005
    command:
      - flownode
      - start
      - --node-id=0
      - --metasrv-addrs=metasrv:3002
      - --rpc-bind-addr=0.0.0.0:4004
      - --rpc-server-addr=greptime_flownode0:4004
      - --http-addr=0.0.0.0:4005
    depends_on:
      greptime_frontend0:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://greptime_flownode0:4005/health"]
      interval: 5s
      timeout: 3s
      retries: 5

volumes:
  # Define the volume for clickhouse data persistence.
  clickhouse-data:
  clickhouse-logs:
  victoria-logs-data:
  etcd0_data:
  greptime_datanode0_data:
